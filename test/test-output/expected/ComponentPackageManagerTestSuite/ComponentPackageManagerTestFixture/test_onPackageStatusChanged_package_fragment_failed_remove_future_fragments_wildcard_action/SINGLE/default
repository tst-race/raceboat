ComponentPackageManagerTestFixture_test_onPackageStatusChanged_package_fragment_failed_remove_future_fragments_wildcard_action_Test::TestBody:  with packageManager=PackageManager{
    pendingEncodings:{}
    nextEncodingHandle: 0
    fragments: {
        0:PackageFragmentInfo{package: 7, action: nullptr, state: DONE, offset: 0, len: 1}, 
        1:PackageFragmentInfo{package: 7, action: 42, state: UNENCODED, offset: 1, len: 2}, 
        2:PackageFragmentInfo{package: 8, action: 42, state: UNENCODED, offset: 0, len: 1}, 
        3:PackageFragmentInfo{package: 8, action: 43, state: UNENCODED, offset: 1, len: 2}, 
    }
}
ComponentPackageManagerTestFixture_test_onPackageStatusChanged_package_fragment_failed_remove_future_fragments_wildcard_action_Test::TestBody:  with mockComponentManager.mockLink=Link{
    linkId: mockLinkId
    connections: []
    actionQueue: [
        ActionInfo{action: Action{ id:42}, linkId: , encoding size: 1, fragments: [PackageFragmentInfo{package: 7, action: 42, state: UNENCODED, offset: 1, len: 2}, PackageFragmentInfo{package: 8, action: 42, state: UNENCODED, offset: 0, len: 1}, ], toBeRemoved: 0}, 
        ActionInfo{action: Action{ id:43}, linkId: , encoding size: 1, fragments: [PackageFragmentInfo{package: 8, action: 43, state: UNENCODED, offset: 1, len: 2}, ], toBeRemoved: 0}, 
    ]
    packageQueue: [
        PackageInfo{ linkId: mockLinkId, sdkHandle: 7, pendingEncodeHandle: 0, packageFragments: [PackageFragmentInfo{package: 7, action: nullptr, state: DONE, offset: 0, len: 1}, PackageFragmentInfo{package: 7, action: 42, state: UNENCODED, offset: 1, len: 2}, ] }, 
        PackageInfo{ linkId: mockLinkId, sdkHandle: 8, pendingEncodeHandle: 0, packageFragments: [PackageFragmentInfo{package: 8, action: 42, state: UNENCODED, offset: 0, len: 1}, PackageFragmentInfo{package: 8, action: 43, state: UNENCODED, offset: 1, len: 2}, ] }, 
    ]
}
ComponentPackageManagerTestFixture_test_onPackageStatusChanged_package_fragment_failed_remove_future_fragments_wildcard_action_Test::TestBody:  with mockComponentManager.mockLink2=Link{
    linkId: mockLinkId2
    connections: []
    actionQueue: [
        ActionInfo{action: Action{ id:43}, linkId: , encoding size: 1, fragments: [PackageFragmentInfo{package: 8, action: 43, state: UNENCODED, offset: 1, len: 2}, ], toBeRemoved: 0}, 
    ]
    packageQueue: [
        PackageInfo{ linkId: mockLinkId2, sdkHandle: 9, pendingEncodeHandle: 0, packageFragments: [] }, 
    ]
}
MockRaceSdkComms::onPackageStatusChanged:  with handle=7, status=PACKAGE_FAILED_GENERIC, timeout=-2147483648
MockComponentManagerInternal::getLinks: 
ComponentPackageManagerTestFixture_test_onPackageStatusChanged_package_fragment_failed_remove_future_fragments_wildcard_action_Test::TestBody:  with packageManager=PackageManager{
    pendingEncodings:{}
    nextEncodingHandle: 0
    fragments: {
        4:PackageFragmentInfo{package: 8, action: 42, state: UNENCODED, offset: 0, len: 3}, 
        5:PackageFragmentInfo{package: 9, action: 43, state: UNENCODED, offset: 0, len: 3}, 
    }
}
ComponentPackageManagerTestFixture_test_onPackageStatusChanged_package_fragment_failed_remove_future_fragments_wildcard_action_Test::TestBody:  with mockComponentManager.mockLink=Link{
    linkId: mockLinkId
    connections: []
    actionQueue: [
        ActionInfo{action: Action{ id:42}, linkId: mockLinkId, encoding size: 1, fragments: [PackageFragmentInfo{package: 8, action: 42, state: UNENCODED, offset: 0, len: 3}, ], toBeRemoved: 0}, 
        ActionInfo{action: Action{ id:43}, linkId: mockLinkId2, encoding size: 1, fragments: [PackageFragmentInfo{package: 9, action: 43, state: UNENCODED, offset: 0, len: 3}, ], toBeRemoved: 0}, 
    ]
    packageQueue: [
        PackageInfo{ linkId: mockLinkId, sdkHandle: 8, pendingEncodeHandle: 0, packageFragments: [PackageFragmentInfo{package: 8, action: 42, state: UNENCODED, offset: 0, len: 3}, ] }, 
    ]
}
ComponentPackageManagerTestFixture_test_onPackageStatusChanged_package_fragment_failed_remove_future_fragments_wildcard_action_Test::TestBody:  with mockComponentManager.mockLink2=Link{
    linkId: mockLinkId2
    connections: []
    actionQueue: [
        ActionInfo{action: Action{ id:43}, linkId: mockLinkId2, encoding size: 1, fragments: [PackageFragmentInfo{package: 9, action: 43, state: UNENCODED, offset: 0, len: 3}, ], toBeRemoved: 0}, 
    ]
    packageQueue: [
        PackageInfo{ linkId: mockLinkId2, sdkHandle: 9, pendingEncodeHandle: 0, packageFragments: [PackageFragmentInfo{package: 9, action: 43, state: UNENCODED, offset: 0, len: 3}, ] }, 
    ]
}
